>> Prevent different tasks to submitting to the same executor at the same time, or else manage concurrent submissions better...

Next:
=====
Reimagine Scale.java (extends Range?)

	- ScaleRange always linear translating 0--1 --> min--max
	    * getValue(double scale);
	    * getScaled(double value)
	    * expandScale(double factor)
	    * shift(scaledOffset)
        - ScalingFunction: LinearScale, LogScale, SqrtScale, PowScale: x -> f(x)
	    * valueAt(), inverseAt() <-- Function, InverseFunction
	- log, sqrt, pow:
            - scale content itself, if possible (this way no recalculation 
	      needed with changes to scale (expand/offset), or change 
	      dynamically...
	    - overwrite content.getValue()
		scaling.valueAt(super.getValue());

BIG things
==========

* Add javadoc to all source files
* Merge with xcrush utils (esp. interfaces)
* Linear Algebra, matric solve, eigenvalues, eigenvectors, SVD, PCA etc.


Features
========

util.fft:

	- Complex FFT

	- Multi-dimensional FFT on Object[] array
	  (complex and real cores)

	- Generic FFT for LinearAlgebra...	

util.data:

	- WeightedPoint functions: ^, exp, log, trig, hyperbolic...

	- Overhaul optimizers 
		* use Function<Parameter[], Double>
		* fixed parameters vs varied parameters
		* parameters with name, flex unit
		* implement other optimizers

	- ArrayUtil migration...

	- MEM deconvolution

util:

	- Flagging (FlagMaster)


util.math:

	- linear algebra
	- numerical integration
	- root finding


util.math.specialfunctions

	- Special functions Float and Double versions.

util.plot

	- make it work with layers and coordinate systems etc.
	- graph plots (dots and/or points, bars etc)
	- contours

util.text

	- GreekLetter/Symbol to become Enum (uucode, name)
	- Expression parsing
